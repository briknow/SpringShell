buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE")
        classpath("net.sourceforge.jtds:jtds:1.3.1")
    }
}

// from: https://plugins.gradle.org/plugin/org.flywaydb.flyway
plugins {
    id "org.flywaydb.flyway" version "4.0.3"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

/* --------------------------------------
    application configuration properties
   --------------------------------------
 */
def applicationName = 'SpringShell'
def databaseName = applicationName
// todo: introduce an environment config mechanism like https://github.com/marceloemanoel/gradle-environments-plugin
def databaseServer = 'localhost'
def applicationRoot = 'c:\\Sitka'

jar {
    baseName = applicationName
    version = '0.1.0'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.springframework.boot:spring-boot-devtools")
    testCompile("junit:junit")
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

// assumes SQL Server 2014 is installed
// also assumes the ntmlauth.dll from the jtds distro is copied to the JDK bin http://stackoverflow.com/questions/13267764/i-o-error-sso-failed-native-sspi-library-not-loaded
// todo: deploy the dll via gradle
flyway {
    url = "jdbc:jtds:sqlserver://${databaseServer}/${databaseName}"
    //microsoft jdbc style - url = "jdbc:sqlserver://${databaseServer};databaseName=${databaseName};integratedSecurity=true;"
}
//println java.lang.System.getProperty('java.library.path')
task dropDatabase(type: Exec) {
    commandLine 'sqlcmd',
            '-S', databaseServer,
            '-i', 'src\\main\\resources\\db\\utils\\drop_database.sql',
            "-v",
            "dbName=${databaseName}"
}

task createDatabase(type: Exec){
    // create the data directory
    def dataPath = "${applicationRoot}\\${applicationName}\\Data"
    def logDirBase = new File(dataPath)
    logDirBase.mkdirs()

    // run the create script
    commandLine 'sqlcmd',
            '-S', databaseServer,
            '-i', 'src\\main\\resources\\db\\utils\\create_database.sql',
            "-v",
            "dbName=${databaseName}",
            "dataPath=\"${dataPath}\""
}
